openapi: 3.0.0
info:
  title: College Management System API
  version: 1.0.0
  description: API for managing courses, students, tests and SOP evaluations

servers:
  - url: http://localhost:8090
    description: Auth service
  - url: http://localhost:8091
    description: Course service

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth schemas
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 100
    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          minLength: 50
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
          nullable: true

    # Course schemas
    GroupSchema:
      type: object
      required: [group_id, seminarist_id]
      properties:
        group_id:
          type: string
          minLength: 1
        seminarist_id:
          type: string
          minLength: 1
    CourseCreateRequest:
      type: object
      required: [name, lector_id, groups]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        lector_id:
          type: string
          minLength: 1
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupSchema'
    CourseUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          nullable: true
        description:
          type: string
          maxLength: 500
          nullable: true
        lector_id:
          type: string
          minLength: 1
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupSchema'
          nullable: true
    CourseResponse:
      type: object
      properties:
        course_id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        lector:
          type: object
          properties:
            lector_id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
        blocks:
          type: array
          items:
            type: object
            properties:
              block_id:
                type: string
              name:
                type: string
              units:
                type: array
                items:
                  type: object
                  properties:
                    unit_id:
                      type: integer
                    name:
                      type: string
                    type:
                      type: string
                      enum: [lecture, seminar, test]

    # Block schemas
    BlockCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
    BlockUpdateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
    BlockResponse:
      type: object
      properties:
        name:
          type: string
        units:
          type: array
          items:
            type: integer

    # Unit schemas
    UnitContentSchema:
      type: object
      properties:
        test_id:
          type: string
          nullable: true
        text_content:
          type: string
          nullable: true
    UnitCreateRequest:
      type: object
      required: [name, type, content]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        type:
          type: string
          enum: [lecture, seminar, test]
        content:
          type: object
    UnitUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          nullable: true
        type:
          type: string
          enum: [lecture, seminar, test]
          nullable: true
        content:
          type: object
          nullable: true
    UnitResponse:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        content:
          type: object

    # Test schemas
    QuestionSchema:
      type: object
      required: [id, text, type]
      properties:
        id:
          type: integer
        text:
          type: string
          minLength: 5
          maxLength: 500
        type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        answers:
          type: array
          items:
            type: string
          nullable: true
    AnswerSchema:
      type: object
      required: [id, answer]
      properties:
        id:
          type: integer
        answer:
          type: array
          items:
            type: string
    TestCreateRequest:
      type: object
      required: [questions, answers]
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionSchema'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerSchema'
        deadline:
          type: string
          format: date-time
          nullable: true
    TestSubmitRequest:
      type: object
      required: [answers]
      properties:
        answers:
          type: array
          items:
            type: object
    TestDetailsResponse:
      type: object
      properties:
        deadline:
          type: string
          format: date-time
          nullable: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionSchema'
    TestResultsResponse:
      type: object
      properties:
        data:
          type: object
        status:
          type: integer
          default: 200

    # SOP schemas
    SOPQuestionResponse:
      type: object
      discriminator:
        propertyName: question_type
      properties:
        question:
          type: string
        question_type:
          type: string
          enum: [text, rating]
    SOPBlockSubmit:
      type: object
      required: [block_type, questions_answers]
      properties:
        block_type:
          type: string
          enum: [course, lecturer, seminarist]
        teacher_id:
          type: string
          nullable: true
        questions_answers:
          type: array
          items:
            $ref: '#/components/schemas/SOPQuestionResponse'
    SOPSubmitRequest:
      type: object
      required: [courses]
      properties:
        courses:
          type: array
          items:
            type: object
            properties:
              course_id:
                type: string
              blocks:
                type: array
                items:
                  $ref: '#/components/schemas/SOPBlockSubmit'

    # Enums
    QuestionTypeEnum:
      type: string
      enum: [one_of, many, text, custom]
    RoleEnum:
      type: string
      enum: [admin, teacher, student, lecturer, seminarist]
    BlockTypeEnum:
      type: string
      enum: [course, lecturer, seminarist]

    # Common
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        status:
          type: integer
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

  parameters:
    limitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page
    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Page offset
    searchParam:
      name: search
      in: query
      schema:
        type: string
        default: ''
      description: Search term

paths:
  # Auth endpoints
  /login:
    post:
      tags: [Auth]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '400':
          description: Invalid request
        '401':
          description: Invalid or expired token
        '500':
          description: Internal server error

  # Course endpoints
  /courses:
    get:
      tags: [Courses]
      summary: Get list of courses
      security: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/searchParam'
        - name: student_id
          in: query
          schema:
            type: string
          description: Specific student ID (admin only)
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
    post:
      tags: [Courses]
      summary: Create new course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                type: object
                properties:
                  course_id:
                    type: string
                  status:
                    type: integer
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /courses/{course_id}:
    get:
      tags: [Courses]
      summary: Get course details
      security: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Course not found
        '500':
          description: Internal server error
    put:
      tags: [Courses]
      summary: Update course
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdateRequest'
      responses:
        '200':
          description: Course updated
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /courses/{course_id}/blocks:
    post:
      tags: [Blocks]
      summary: Create new block in course
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCreateRequest'
      responses:
        '201':
          description: Block created
          content:
            application/json:
              schema:
                type: object
                properties:
                  block_id:
                    type: string
                  status:
                    type: integer
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /blocks/{block_id}:
    get:
      tags: [Blocks]
      summary: Get block details
      security: []
      parameters:
        - name: block_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Block details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '403':
          description: Forbidden
        '404':
          description: Block not found
        '500':
          description: Internal server error
    put:
      tags: [Blocks]
      summary: Update block
      security:
        - bearerAuth: []
      parameters:
        - name: block_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockUpdateRequest'
      responses:
        '200':
          description: Block updated
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '404':
          description: Block not found
        '500':
          description: Internal server error

  /blocks/{block_id}/units:
    post:
      tags: [Units]
      summary: Create new unit in block
      security:
        - bearerAuth: []
      parameters:
        - name: block_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitCreateRequest'
      responses:
        '201':
          description: Unit created
          content:
            application/json:
              schema:
                type: object
                properties:
                  unit_id:
                    type: integer
                  status:
                    type: integer
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /units/{unit_id}:
    get:
      tags: [Units]
      summary: Get unit details
      security: []
      parameters:
        - name: unit_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unit details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitResponse'
        '403':
          description: Forbidden
        '404':
          description: Unit not found
        '500':
          description: Internal server error
    put:
      tags: [Units]
      summary: Update unit
      security:
        - bearerAuth: []
      parameters:
        - name: unit_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitUpdateRequest'
      responses:
        '200':
          description: Unit updated
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '404':
          description: Unit not found
        '500':
          description: Internal server error

  # Test endpoints
  /tests:
    post:
      tags: [Tests]
      summary: Create new test
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCreateRequest'
      responses:
        '201':
          description: Test created
          content:
            application/json:
              schema:
                type: object
                properties:
                  test_id:
                    type: string
                  message:
                    type: string
                  status:
                    type: integer
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /test_results/{test_id}:
    post:
      tags: [Tests]
      summary: Submit test results
      security:
        - bearerAuth: []
      parameters:
        - name: test_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSubmitRequest'
      responses:
        '201':
          description: Test results submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResultsResponse'
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    get:
      tags: [Tests]
      summary: Get test or results
      security: []
      parameters:
        - name: test_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test details or results
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TestDetailsResponse'
                  - $ref: '#/components/schemas/TestResultsResponse'
        '403':
          description: Forbidden
        '404':
          description: Test not found
        '500':
          description: Internal server error

  # SOP endpoints
  /sop:
    post:
      tags: [SOP]
      summary: Submit SOP evaluation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SOPSubmitRequest'
      responses:
        '201':
          description: SOP submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: integer
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '409':
          description: Already submitted
        '500':
          description: Internal server error

  /sop/teacher_results:
    get:
      tags: [SOP]
      summary: Get teacher SOP results
      security:
        - bearerAuth: []
      parameters:
        - name: teacher_id
          in: query
          schema:
            type: string
          description: Teacher ID (admin only)
      responses:
        '200':
          description: Teacher SOP results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResultsResponse'
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server error

  # Student endpoints
  /courses/{course_id}/students:
    get:
      tags: [Students]
      summary: Get course students
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '403':
          description: Forbidden
        '500':
          description: Internal server error